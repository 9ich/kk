#
# inferno style
#

newlines			= lf
utf8_force			= True
utf8_bom			= remove

align_enum_equ_span		= 3
align_func_proto_span		= 3
align_on_tabstop		= True		# align on tabstops
align_pp_define_span		= 3
align_right_cmt_at_col		= 1
align_right_cmt_gap		= 2
align_right_cmt_span		= 3
align_typedef_func		= 2
align_typedef_span		= 2
align_typedef_star_style	= 2
align_var_def_star_style	= 2
align_var_struct_span		= 3
align_with_tabs			= True		# use tabs to align
cmt_indent_multi		= False
cmt_reflow_mode			= 0
cmt_star_cont			= True
eat_blanks_after_open_brace	= True
eat_blanks_before_close_brace	= True
indent_cmt_with_tabs		= True
indent_columns			= output_tab_size
indent_label			= 2		# pos: absolute col, neg: relative column
indent_with_tabs		= 2		# 1=indent to level only, 2=indent with tabs
input_tab_size			= 8		# original tab size
mod_full_brace_do		= remove	# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_for		= remove	# "for () a--;" vs "for () { a--; }"
mod_full_brace_if		= remove	# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_while		= remove	# "while (a) a--;" vs "while (a) { a--; }"
mod_paren_on_return		= remove	# "return 1;" vs "return (1);"
nl_after_func_body		= 2
nl_brace_else			= remove
nl_brace_while			= remove
nl_do_brace			= remove	# "do {" vs "do \n {"
nl_else_brace			= remove	# "else {" vs "else \n {"
nl_end_of_file			= force
nl_end_of_file_min		= 1
nl_enum_brace			= add		# "enum {" vs "enum \n {"
nl_enum_leave_one_liners	= True
nl_fcall_brace			= add		# "foo() {" vs "foo()\n{"
nl_fdef_brace			= add		# "int foo() {" vs "int foo()\n{"
nl_for_brace			= remove	# "for () {" vs "for () \n {"
nl_func_leave_one_liners	= True
nl_func_type_name		= force
nl_if_brace			= remove	# "if () {" vs "if () \n {"
nl_if_leave_one_liners		= False
nl_max				= 2
nl_squeeze_ifdef		= True
nl_struct_brace			= add		# "struct {" vs "struct \n {"
nl_switch_brace			= remove	# "switch () {" vs "switch () \n {"
nl_union_brace			= add		# "union {" vs "union \n {"
nl_while_brace			= remove	# "while () {" vs "while () \n {"
output_tab_size			= 8		# new tab size
sp_after_cast			= remove	# "(int) a" vs "(int)a"
sp_after_comma			= force
sp_after_sparen			= remove	# "if () {" vs "if (){"
sp_assign			= force
sp_before_semi			= remove
sp_before_sparen		= remove	# "if (" vs "if("
sp_func_call_paren		= remove	# "foo (" vs "foo("
sp_func_def_paren		= remove	# "int foo (){" vs "int foo(){"
sp_func_proto_paren		= remove	# "int foo ();" vs "int foo();"
sp_inside_braces		= remove	# "{ 1 }" vs "{1}"
sp_inside_braces_enum		= remove	# "{ 1 }" vs "{1}"
sp_inside_braces_struct		= remove	# "{ 1 }" vs "{1}"
sp_inside_fparen		= remove        # "( 1 )" vs "(1)" - functions
sp_inside_paren			= remove	# "( 1 )" vs "(1)"
sp_inside_paren_cast		= remove
sp_inside_sparen		= remove        # "( 1 )" vs "(1)" - if/for/etc
sp_inside_square		= remove
sp_num_before_tr_emb_cmt	= 2
sp_paren_brace			= remove	# space between ')' and '{'
sp_paren_paren			= remove	# space between (( and ))
sp_return_paren			= remove	# "return (1);" vs "return(1);"
sp_sizeof_paren			= remove	# "sizeof (int)" vs "sizeof(int)"
sp_sparen_brace			= remove	# space between ')' and '{' of 'if', 'for', 'switch', and 'while'
sp_brace_else			= remove	# space between '}' and 'else'
sp_else_brace			= remove	# space between 'else' and '{'
